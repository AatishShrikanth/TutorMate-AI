import json
from typing import Dict, Any
from models.schemas import ProcessedTutorial

class ExportService:
    def __init__(self):
        pass
    
    def export_to_markdown(self, tutorial: ProcessedTutorial) -> str:
        """Export tutorial data to Markdown format"""
        md_content = f"""# {tutorial.summary.title}

## Summary
**Duration:** {tutorial.summary.duration or 'Not specified'}  
**Difficulty:** {tutorial.summary.difficulty_level}  
**Language:** {tutorial.target_language.title()}

### Quick Overview
{tutorial.summary.short_summary}

### Detailed Summary
{tutorial.summary.detailed_summary}

### Key Topics
"""
        
        for topic in tutorial.summary.key_topics:
            md_content += f"- {topic}\n"
        
        md_content += "\n## Action Plan\n\n"
        
        for step in tutorial.action_steps:
            md_content += f"### Step {step.step_number}: {step.title}\n\n"
            md_content += f"{step.description}\n\n"
            if step.estimated_time:
                md_content += f"**Estimated Time:** {step.estimated_time}\n\n"
            md_content += f"- [ ] Completed\n\n"
        
        # Add practice questions section
        if tutorial.practice_questions:
            md_content += "\n## Practice Questions\n\n"
            
            for question in tutorial.practice_questions:
                md_content += f"### Question {question.question_id}\n\n"
                md_content += f"**Topic:** {question.topic} | **Difficulty:** {question.difficulty.title()}\n\n"
                md_content += f"{question.question}\n\n"
                
                if question.question_type == "multiple_choice" and question.options:
                    for i, option in enumerate(question.options, 1):
                        md_content += f"{chr(64 + i)}. {option}\n"
                    md_content += "\n"
                elif question.question_type == "true_false":
                    md_content += "A. True\nB. False\n\n"
                
                md_content += f"**Answer:** {question.correct_answer}\n\n"
                md_content += f"**Explanation:** {question.explanation}\n\n"
                md_content += "---\n\n"
        
        md_content += "---\n"
        md_content += f"*Generated by TutorMate AI*\n"
        
        return md_content
    
    def export_to_json(self, tutorial: ProcessedTutorial) -> str:
        """Export tutorial data to JSON format"""
        return tutorial.model_dump_json(indent=2)
    
    def export_to_checklist(self, tutorial: ProcessedTutorial) -> str:
        """Export as simple checklist format"""
        checklist = f"{tutorial.summary.title}\n"
        checklist += "=" * len(tutorial.summary.title) + "\n\n"
        
        checklist += "ACTION STEPS:\n"
        checklist += "-" * 20 + "\n"
        for step in tutorial.action_steps:
            checklist += f"[ ] {step.title}\n"
            checklist += f"    {step.description}\n"
            if step.estimated_time:
                checklist += f"    Time: {step.estimated_time}\n"
            checklist += "\n"
        
        # Add practice questions to checklist
        if tutorial.practice_questions:
            checklist += "\nPRACTICE QUESTIONS:\n"
            checklist += "-" * 20 + "\n"
            for question in tutorial.practice_questions:
                checklist += f"Q{question.question_id}: {question.question}\n"
                checklist += f"Answer: {question.correct_answer}\n"
                checklist += f"Topic: {question.topic} | Difficulty: {question.difficulty}\n\n"
        
        return checklist
